apply plugin: 'java'
apply plugin: 'application'

// macAppBundle adds the createDmg task as a dependency of the assemble task
// which will fail if not run on a macintosh
if(MAC == localOsName) apply plugin: 'macAppBundle'
apply plugin: 'launch4j'

defaultTasks 'build'

if(MAC == localOsName) {
    macAppBundle {
        //keyChain = 'login'
        //certIdentity = 'E279LP5667'
        mainClassName = "org.mdpnp.apps.testapp.Main"
        icon = "$projectDir/src/main/resources/org/mdpnp/apps/testapp/icon.icns"
        appName = "MDPnP Demo Apps " + project.version
        volumeName = "MDPnP Demo Apps " + project.version
        backgroundImage = "$projectDir/src/main/resources/org/mdpnp/apps/testapp/mdpnp.png"
        dmgName = project.name + '-' + project.version + '-mac'
    }
//    createDmg.dependsOn('codesign')
}

launch4j {
    mainClassName = "org.mdpnp.apps.testapp.Main"
    icon = "$projectDir/src/main/resources/org/mdpnp/apps/testapp/icon.ico"
    launch4jCmd = "$buildDir/launch4j-install/launch4j/launch4j"
    customProcName = true
    maxHeapSize = 128
    opt = '-Dsun.java2d.noddraw=true'
}




buildscript {
    dependencies {
        classpath 'edu.sc.seis:gradle-macappbundle:1.0.8'
        classpath 'edu.sc.seis:gradle-launch4j:1.0.5'
    }
}

def launch4jPath = 'http://downloads.sourceforge.net/project/launch4j/launch4j-3/3.1.0-beta1/'
def launch4jName = ''
switch(localOsName) {
    case WINDOWS:
    launch4jName = 'launch4j-3.1.0-beta1-win32.zip'
    break
    case MAC:
    launch4jName = 'launch4j-3.1.0-beta1-macosx-x86-10.8.tgz'
    break
    case LINUX:
    launch4jName = 'launch4j-3.1.0-beta1-linux.zip'
    break
}


task downloadLaunch4j {
    outputs.file "$buildDir/"+launch4jName
    doLast {
        def f = file("$buildDir/"+launch4jName)
        println 'Downloading ' + launch4jPath + launch4jName
        new URL(launch4jPath+launch4jName).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
}

task explodeLaunch4j(dependsOn: downloadLaunch4j, type: Copy) {
    from launch4jName.endsWith("tgz") ? tarTree("$buildDir/"+launch4jName) : zipTree("$buildDir/"+launch4jName)
    into "$buildDir/launch4j-install/"
}

createExe.dependsOn(explodeLaunch4j)

sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

mainClassName = 'org.mdpnp.apps.testapp.Main'

def String BUILD_NUMBER = "$System.env.BUILD_NUMBER"

Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
}

manifest.mainAttributes("Main-Class" : "org.mdpnp.apps.testapp.Main")

def JOGL_version = '2.0.2'

dependencies {
    compile project(':interop-lab:demo-devices')
    compile project(':interop-lab:demo-guis')
    compile project(':interop-lab:demo-guis-swing')

    runtime project(':interop-lab:demo-purejavacomm')

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
    runtime group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
    runtime group: 'log4j', name: 'log4j', version: '1.2.17'
    runtime project(':interop-lab:pump-control')
    runtime group: 'org.mdpnp.apps.testapp.pca', name: 'mdpnp-sounds', version: '0.1.0'

    compile group: 'org.jfree', name:'jfreechart', version: '1.0.14'
    compile group: 'com.jeffplourde', name: 'Utility', version: '0.0.1'

    // Default capture device is a trimmed down piece of OpenIMAJ
    compile group: 'com.github.sarxos', name: 'webcam-capture', version: '0.3.9'

    switch(targetOsName) {
        case ALL: distZip.classifier = ""
        break
        case WINDOWS: distZip.classifier = "windows"
        break
        case MAC: distZip.classifier = "mac"
        break
        case LINUX: distZip.classifier = "linux"
        break
    }


    if(WINDOWS == targetOsName || ALL == targetOsName) {
        switch(targetOsArch) {
            case ALL: distZip.classifier+=""
                break
            case X64: distZip.classifier+="-64"
                break
            case X86: distZip.classifier+="-32"
                break
        }

        if(ALL == targetOsArch || X64 == targetOsArch) {
            runtime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'win32amd64'
            runtime group: 'org.jogamp.jogl', name: 'jogl-all', version: JOGL_version, classifier: 'natives-windows-amd64'
            runtime group: 'org.jogamp.gluegen', name: 'gluegen-rt', version: JOGL_version, classifier: 'natives-windows-amd64'
        }
        if(ALL == targetOsArch || X86 == targetOsArch) {
            runtime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'win32x86'
            runtime group: 'org.jogamp.jogl', name: 'jogl-all', version: JOGL_version, classifier: 'natives-windows-i586'
            runtime group: 'org.jogamp.gluegen', name: 'gluegen-rt', version: JOGL_version, classifier: 'natives-windows-i586'
        }
    }
    if(MAC == targetOsName || ALL == targetOsName) {
        runtime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'darwin'
        runtime group: 'org.jogamp.jogl', name: 'jogl-all', version: JOGL_version, classifier: 'natives-macosx-universal'
        runtime group: 'org.jogamp.gluegen', name: 'gluegen-rt', version: JOGL_version, classifier: 'natives-macosx-universal'
    }
    if(LINUX == targetOsName || ALL == targetOsName) {
        switch(targetOsArch) {
            case ALL: distZip.classifier += ""
                break
            case X64: distZip.classifier += "-64"
                break
            case X86: distZip.classifier += "-32"
                break
            case ARM: case ARMHF: distZip.classifier += "-arm"
                break
        }
        if(ALL == targetOsArch || X64 == targetOsArch) {
            runtime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'linuxamd64'
            runtime group: 'org.jogamp.jogl', name: 'jogl-all', version: JOGL_version, classifier: 'natives-linux-amd64'
            runtime group: 'org.jogamp.gluegen', name: 'gluegen-rt', version: JOGL_version, classifier: 'natives-linux-amd64'
        }
        if(ALL == targetOsArch || X86 == targetOsArch) {
            runtime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'linuxi386'
            runtime group: 'org.jogamp.jogl', name: 'jogl-all', version: JOGL_version, classifier: 'natives-linux-i586'
            runtime group: 'org.jogamp.gluegen', name: 'gluegen-rt', version: JOGL_version, classifier: 'natives-linux-i586'
        }
        if(ALL == targetOsArch || ARM == targetOsArch || ARMHF == targetOsArch) {
            runtime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'linuxarm'
            runtime group: 'org.jogamp.jogl', name: 'jogl-all', version: JOGL_version, classifier: 'natives-android-armv6'
            runtime group: 'org.jogamp.gluegen', name: 'gluegen-rt', version: JOGL_version, classifier: 'natives-android-armv6'
        }
    }
}

task createZip(type: Zip) {
    classifier = distZip.classifier
    from project.buildDir.getAbsolutePath()+File.separator+launch4j.outputDir
}
createZip.dependsOn(createExe)

jar {
    manifest {
        attributes("Main-Class": 'org.mdpnp.apps.testapp.Main', "Built-By": System.properties['user.name'], "Created-By": System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")",
        "Implementation-Title": project.name, "Implementation-Version": project.version, "Build-Date": buildDate, "Build-Time": buildTime,
        "Specification-Title": project.name, "Specification-Version": project.version, "Implementation-Vendor": project.group,
        "Specification-Vendor": project.group, "Build-Number": BUILD_NUMBER)

    }
}
