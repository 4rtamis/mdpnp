<?xml version="1.0" encoding="ISO-8859-1"?>
<dds version="5.0.0">
	<qos_library name="UDPv4TransportLibrary">
	  <!-- Using a singular default profile for now -->
		<qos_profile name="DefaultProfile" is_default_qos="true">
			<participant_qos>
				<receiver_pool>
					<buffer_size>65530</buffer_size>
				</receiver_pool>
				<!-- 
				<default_unicast>
				    <element>
				    127.0.0.1
				    </element>
				</default_unicast>
				-->
				<discovery>
				  <!--  promiscuous for the lab environment -->
					<accept_unknown_peers>true</accept_unknown_peers>
					<!--  multicast discovery -->
					<initial_peers>
						<element>udpv4://239.255.0.1</element>
						<!--<element>udpv4://127.0.0.1</element>-->
						<!--<element>192.168.1.183</element>-->
					</initial_peers>
					<!-- wow this setting was terribly problematic on 6/6/2013
					<enabled_transports>
						<element>UDPv4</element>
					</enabled_transports>
					-->
				</discovery>
				<!--  mainly to disable shared memory transport because I have a lot of trouble with it -->
				<transport_builtin>
					<mask>DDS_TRANSPORTBUILTIN_UDPv4
					</mask>
				</transport_builtin>
				<!-- some typecodes serialize to something larger than is supported by default -->
                                <resource_limits>
                                  <type_code_max_serialized_length>4096</type_code_max_serialized_length>
                                </resource_limits>
				  <property>
    <value>
      <!-- All these settings are trying to better support sending icon images
           There's a great chance these are less than optimal because fragmented
           IP packets are terribly noisy ... and it's better to keep it to one IP frame per UDP datagram -->
      <element>
        <name>dds.transport.UDPv4.builtin.parent.message_size_max</name>
        <value>65530</value>
        <propagate>false</propagate>
      </element>
      <element>
        <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
        <value>65530</value>
        <propagate>false</propagate>
      </element>
      <element>
        <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
        <value>65530</value>
        <propagate>false</propagate>
      </element>
    </value>
  </property>
			</participant_qos>
			<datareader_qos>
			  
				<liveliness>
				    <!-- Let DDS handle heartbeats -->
					<kind>DDS_AUTOMATIC_LIVELINESS_QOS</kind>
					<!-- Point at which writers (and associated instances) become "not alive" -->
					<lease_duration>
						<sec>2</sec>
						<nanosec>0</nanosec>
					</lease_duration>
				</liveliness>
				<durability>
				  <!-- Writer is responsible for maintaining transient copies of samples ... see history -->
					<kind>DDS_TRANSIENT_LOCAL_DURABILITY_QOS</kind>
					<!-- Contact that writer directly to get the samples -->
					<direct_communication>DDS_BOOLEAN_TRUE</direct_communication>
				</durability>
				<reliability>
					<kind>RELIABLE_RELIABILITY_QOS</kind>
					<max_blocking_time>
						<sec>5</sec>
						<nanosec>0</nanosec>
					</max_blocking_time>
					<acknowledgment_kind>DDS_PROTOCOL_ACKNOWLEDGMENT_MODE
					</acknowledgment_kind>
				</reliability>
				<history>
				    <!--  samples kept in the writer ... see durability -->
					<kind>KEEP_LAST_HISTORY_QOS</kind>
					<depth>1</depth>
					<refilter>DDS_NONE_REFILTER_QOS</refilter>
				</history>
				<!-- UDI is typical in the instance key so instances are owned exclusively by one publisher (device) -->
				<ownership>
					<kind>DDS_EXCLUSIVE_OWNERSHIP_QOS</kind>
				</ownership>
				<!-- Enabling lots of RTPS level fragmentation  -->
				<reader_resource_limits>
				    <max_fragments_per_sample>5000</max_fragments_per_sample>
				    <max_query_condition_filters>32</max_query_condition_filters>
				</reader_resource_limits>
			</datareader_qos>
			<datawriter_qos>
				<liveliness>
				    <!-- Let DDS handle heartbeats -->
					<kind>DDS_AUTOMATIC_LIVELINESS_QOS</kind>
					<!-- Point at which writers (and associated exclusively owned instances) become "not alive" -->
					<lease_duration>
						<sec>2</sec>
						<nanosec>0</nanosec>
					</lease_duration>
				</liveliness>
				<durability>
				    <!-- Writer is responsible for maintaining transient copies of samples ... see history -->
					<kind>DDS_TRANSIENT_LOCAL_DURABILITY_QOS</kind>
					<!-- Contact that writer directly to get the samples -->
					<direct_communication>DDS_BOOLEAN_TRUE</direct_communication>
				</durability>
				<reliability>
					<kind>RELIABLE_RELIABILITY_QOS</kind>
					<max_blocking_time>
						<sec>5</sec>
						<nanosec>0</nanosec>
					</max_blocking_time>
					<acknowledgment_kind>DDS_PROTOCOL_ACKNOWLEDGMENT_MODE
					</acknowledgment_kind>
				</reliability>
				<history>
					<kind>KEEP_LAST_HISTORY_QOS</kind>
					<!--  samples kept in the writer ... see durability -->
					<depth>1</depth>
					<refilter>DDS_NONE_REFILTER_QOS</refilter>
				</history>
				<!-- UDI is typical in the instance key so instances are owned exclusively by one publisher (device) -->
				<ownership>
					<kind>DDS_EXCLUSIVE_OWNERSHIP_QOS</kind>
				</ownership>
				<!-- Enables RTPS fragmentation by allowing a separate thread to manage publication of samples in several fragments -->
				<publish_mode>
					<kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
				</publish_mode>
			</datawriter_qos>
		</qos_profile>
	</qos_library>
</dds>
