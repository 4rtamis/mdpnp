<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-4.1.xsd">


    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order"                    value="1"/>
        <property name="ignoreResourceNotFound"   value="true"/>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="locations">
            <list>
                <value>classpath:/ice.properties</value>
            </list>
        </property>
    </bean>

    <bean id="mdsConnectivity"
          class="org.mdpnp.devices.MDSHandler"
          init-method="start"
          destroy-method="shutdown">
        <constructor-arg ref="eventLoop"/>
        <constructor-arg ref="domainParticipant" />
    </bean>

    <bean id="jdbcDB"
          class="org.mdpnp.apps.testapp.patient.PatientApplicationFactory.EmbeddedDB"
          init-method="init"
          destroy-method="shutdown">
        <property name="schemaDef" value="DbSchema.sql"/>
        <property name="dataDef"   value="DataBootstrap.sql"/>
    </bean>

    <!--
        Create a handle to EMR system. Passing fhir url will make it talk to a
        real server; if not specified, will create a in-memory SQL-based
        implementation.
    -->
    <bean id="emr"
          class="org.mdpnp.apps.testapp.patient.EMRFacade.EMRFacadeFactory">
        <property name="url"      value="${mdpnp.fhir.url}"/>
        <property name="jdbcDB"   ref="jdbcDB"/>
    </bean>

    <!--
    Controller that would know which beans from the contest to lookup when
    loading a particular fxml UI definition
    -->
    <bean id="fxDecorator" class="org.mdpnp.apps.testapp.FxmlLoaderFactory">
        <property name="screenDefinitions">
            <map>
                <entry key="PatientDeviceAssn.fxml"  value="uiController" />
            </map>
        </property>
    </bean>

    <bean id="uiController"
          class="org.mdpnp.apps.testapp.patient.PatientInfoController"
          init-method="start"
          destroy-method="stop"
          depends-on="fxDecorator">

        <property name="emr"                 ref="emr"/>
        <property name="deviceListDataModel" ref="deviceListModel"/>
        <property name="mdsConnectivity"     ref="mdsConnectivity"/>
    </bean>

    <!--
    UI entry-point
     -->
    <bean id="mainUI" class="javafx.scene.Parent" factory-bean="fxDecorator" factory-method="getScreen">
        <constructor-arg value="PatientDeviceAssn.fxml"/>
    </bean>

</beans>