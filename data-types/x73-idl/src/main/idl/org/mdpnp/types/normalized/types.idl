#ifndef _TYPES_IDL_
#define _TYPES_IDL_

module org {
  module mdpnp {
    module types {
      module normalized {
        typedef octet INTU8;
        typedef unsigned short INTU16;
        typedef unsigned long INTU32;
        typedef INTU16 OIDType;
        typedef INTU16 PrivateOid;
        typedef INTU16 HANDLE;
        typedef INTU16 InstNumber;
        typedef INTU16 MsmtPrinciple;
        
        enum MsmtPrincipleBits {
        	msp_other = 0x1,
        	msp_chemical = 0x2,
        	msp_electrical = 0x4,
        	msp_impedance = 0x8,
        	msp_nuclear = 0x10,
        	msp_optical = 0x20,
        	msp_thermal = 0x40,
        	msp_biological = 0x80,
        	msp_mechanical = 0x100,
        	msp_acoustical = 0x200,
        	msp_manual = 0x8000
        };
        
        enum NomPartition {
        	nom_part_unspec = 0,
        	nom_part_obj = 1,
        	nom_part_metric = 2,
        	nom_part_alert = 3,
        	nom_part_dim = 4,
        	nom_partvattr = 5, 
        	nom_part_pgrp = 6, 
        	nom_part_sites = 7, 
        	nom_part_infrastruct = 8, 
        	nom_part_fef = 9,
        	nom_part_ecg_extn = 10, 
        	nom_part_ext_nom = 256,
        	nom_part_priv = 1024
        };
        
        struct TYPE {
            NomPartition partition;
            OIDType code;
        }; //@top-level false
        
        typedef INTU32 RelativeTime;
      
      	struct AbsoluteTime {
      		// TODO are these BCD encoded or not? 
      		INTU8 century;
      		INTU8 year;
      		INTU8 month;
      		INTU8 day;
      		INTU8 hour;
      		INTU8 minute;
      		INTU8 second;
      		INTU8 sec_fractions;
      	}; //@top-level false
      	
      	struct HighResolutionRelativeTime {
      		octet value[8];
      	}; //@top-level false

      	enum MetricCategory {
      		mcat_unspec = 0,
      		auto_measurement = 1,
      		manual_measurement = 2,
      		auto_setting = 3,
      		manual_setting = 4,
      		auto_calculation = 5,
      		manual_calculation = 6
      	}; //@top-level false
      	
      	enum MetricAccess {
      		avail_intermittent = 0,
      		upd_periodic = 1,
      	    upd_episodic = 2,
      	    msmt_noncontinuous = 3,
      		acc_evrep = 4,
      		acc_get = 5,
      		acc_scan = 6,
      		gen_opt_sync = 8,
      		sc_opt_normal = 10,
      		sc_opt_extensive = 11,
      		sc_opt_long_pd_avail = 12,
      		sc_opt_confirm = 13
      	}; //@top-level false

      	enum MetricStructure_ {
      		simple = 0,
      		compound = 1,
      		complex = 2
      	}; //@top-level false
      	
      	enum MetricRelevance {
      	    rv_unspec = 0,
      	    rv_internal = 1,
      	    rv_store_only = 2,
      	    rv_no_recording = 3,
      	    rv_phys_ev_ind = 4,
      	    rv_btb_metric = 5,
      	    rv_app_specific = 8,
      	    rv_service = 9
      	}; //@top-level false
      	
      	struct MetricStructure {
      		MetricStructure_ ms_struct;
      		INTU8 ms_comp_no;
      	}; //@top-level false
      	
		struct MetricSpecification {
		     RelativeTime update_period;
		     MetricCategory category;
		     MetricAccess access;
		     MetricStructure structure;
		     MetricRelevance relevance;
		}; //@top-level true
        
        struct Top {
        	OIDType clazz;
        	OIDType name_binding;
        }; //@top-level false
        
        typedef INTU16 MeasurementStatus;
        
        enum MeasurementStatusBits {
        	invalid = 0x1,
        	questionable = 0x2,
        	not_available = 0x4,
        	calibration_ongoing = 0x8,
        	test_data = 0x10,
        	demo_data = 0x20,
        	validated_data = 0x100,
        	early_indication = 0x200,
        	msmt_ongoing = 0x400,
        	msmt_state_in_alarm = 0x4000,
        	msmt_state_al_inhibited = 0x8000
        };
        
        struct EventReport {
        	OIDType object_class; //@key
        	HANDLE object_instance; //@key
        };
        
        union Timestamp switch(long) {
            case 1:
            	RelativeTime relative_time;
            case 2:
        		HighResolutionRelativeTime hi_res_relative_time;
        	default:
        		AbsoluteTime absolute_time;
        };
        
        const string MDC_ATTR_NU_VAL_OBS = "MDC_ATTR_NU_VAL_OBS";

		/****
		Due to issues of severability all attributes of the observed group for a numeric
		are folded into the NuObsValue.
		****/
        struct NuObsValue {
        	Timestamp time;
        	OIDType metric_id;
        	MeasurementStatus state;
        	OIDType unit_code;
        	double value;
        }; //@top-level true

      };
    };
  };
};

#endif
