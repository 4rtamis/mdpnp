module ice {

  typedef string<64> UniqueDeviceIdentifier;
  typedef string<64>  MetricIdentifier;
  typedef long InstanceIdentifier;
  typedef string<128> LongString;
  typedef sequence<LongString, 128> ValidTargets;
  typedef string<256> TextString;
  typedef sequence<octet, 65530> Raster;
  typedef sequence<float, 400> Values;

  struct Time_t {
    long sec;
    long nanosec;
  }; //@top-level false

  

  struct HeartBeat {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    string<32> type;
    
  }; //@top-level true
  #pragma keylist HeartBeat unique_device_identifier
  const string HeartBeatTopic = "HeartBeat";
  
  struct TimeSync {
    UniqueDeviceIdentifier heartbeat_source; //@key
    UniqueDeviceIdentifier heartbeat_recipient; //@key
    Time_t source_source_timestamp;
    Time_t recipient_receipt_timestamp;
  }; //@top-level true
  #pragma keylist TimeSync heartbeat_source heartbeat_recipient
  const String TimeSyncTopic = "TimeSync";

  struct Image {
    Raster raster;
    long width;
    long height;
  }; //@top-level false

  struct DeviceIdentity {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    LongString manufacturer;
    LongString model;
    LongString serial_number;
    Image icon;
    string<128> build;
  };
  #pragma keylist DeviceIdentity unique_device_identifier
  const string DeviceIdentityTopic = "DeviceIdentity";

  enum ConnectionState {
    Connected,
    Connecting,
    Negotiating,
    Disconnecting,
    Disconnected
  };

  enum ConnectionType {
    Serial,
    Simulated,
    Network
  };

  struct DeviceConnectivity {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    ConnectionState state;
    ConnectionType type;
    LongString info;
    ValidTargets valid_targets;
  };
  #pragma keylist DeviceConnectivity unique_device_identifier

  struct DeviceConnectivityObjective {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    boolean connected;
    LongString target;
  };
  #pragma keylist DeviceConnectivityObjective unique_device_identifier


  const string DeviceConnectivityTopic = "DeviceConnectivity";
  const string DeviceConnectivityObjectiveTopic = "DeviceConnectivityObjective";




  // SPECULATIVE
  const string MDC_PRESS_CUFF_NEXT_INFLATION = "MDC_PRESS_CUFF_NEXT_INFLATION";
  const string MDC_PRESS_CUFF_INFLATION = "MDC_PRESS_CUFF_INFLATION";

  const string MDC_HR_ECG_MODE = "MDC_HR_ECG_MODE";
  const string MDC_RR_APNEA = "MDC_RR_APNEA";
  const string MDC_SPO2_C_LOCK = "MDC_SPO2_C_LOCK";
  const string MDC_TIME_PD_INSPIRATORY = "MDC_TIME_PD_INSPIRATORY";
  const string MDC_START_OF_BREATH = "MDC_START_OF_BREATH";
  const string MDC_VENT_TIME_PD_PPV = "MDC_VENT_TIME_PD_PPV";

  const long MDC_EVT_STAT_NBP_DEFL_AND_MEAS_BP = 6250;
  const long MDC_EVT_STAT_NBP_INFL_TO_MAX_CUFF_PRESS = 6222;
  const long MDC_EVT_STAT_OFF = 6226;

  // These leads appear in 11073-10101-2004
  // but are absent from Rosetta
  const string MDC_ECG_LEAD_I = "MDC_ECG_LEAD_I";
  const string MDC_ECG_LEAD_II = "MDC_ECG_LEAD_II";
  const string MDC_ECG_LEAD_III = "MDC_ECG_LEAD_III";
  const string MDC_ECG_LEAD_V1 = "MDC_ECG_LEAD_V1";
  const string MDC_ECG_LEAD_V2 = "MDC_ECG_LEAD_V2";
  const string MDC_ECG_LEAD_V3 = "MDC_ECG_LEAD_V3";
  const string MDC_ECG_LEAD_V4 = "MDC_ECG_LEAD_V4";
  const string MDC_ECG_LEAD_V5 = "MDC_ECG_LEAD_V5";
  const string MDC_ECG_LEAD_V6 = "MDC_ECG_LEAD_V6";
  

  struct Numeric {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    InstanceIdentifier instance_id; //@key
    float value;
    Time_t device_time;
  };
  #pragma keylist Numeric unique_device_identifier metric_id instance_id
  const string NumericTopic = "Numeric";

  struct SampleArray {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    InstanceIdentifier instance_id; //@key
    Values values;
    long millisecondsPerSample;
    Time_t device_time;
  };
  #pragma keylist SampleArray unique_device_identifier metric_id instance_id
  const string SampleArrayTopic = "SampleArray";

  struct Text {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    InstanceIdentifier instance_id; //@key
    TextString value;
  };
  #pragma keylist Text unique_device_identifier metric_id instance_id
  const string TextTopic = "Text";

  struct InfusionObjective {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    LongString requestor;
    boolean stopInfusion;
  };
  #pragma keylist InfusionObjective unique_device_identifier
  const string InfusionObjectiveTopic = "InfusionObjective";
  struct InfusionStatus {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    // is the pump actively infusing?
    boolean infusionActive;

    // it's entirely unclear if patient id, care area, BSA, etc. should be here

    // measurement units are standardized to avoid inconsistent states
    // derived values are omitted to avoid inconsistent states

    // what's in the bag
    TextString drug_name;
    long drug_mass_mcg;
    long solution_volume_ml;
    // concentration can be derived

    // what's the program
    long volume_to_be_infused_ml;
    long infusion_duration_seconds;
    // rate can be derived

    // what is the progress through the program?
    float infusion_fraction_complete;
  };
  #pragma keylist InfusionStatus unique_device_identifier
  const string InfusionStatusTopic = "InfusionStatus";


// Assumes all instances of a given metric have the same alarm settings
// is this true?
  struct AlarmSettings {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    float lower;
    float upper;

  };
  #pragma keylist AlarmSettings unique_device_identifier metric_id
  const string AlarmSettingsTopic = "AlarmSettings";

  struct GlobalAlarmSettingsObjective {
    MetricIdentifier metric_id; //@key
    float lower;
    float upper;

  };
  #pragma keylist GlobalAlarmSettingsObjective metric_id
  const string GlobalAlarmSettingsObjectiveTopic = "GlobalAlarmSettingsObjective";

  struct LocalAlarmSettingsObjective {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    float lower;
    float upper;
  };
  #pragma keylist LocalAlarmSettingsObjective unique_device_identifier metric_id
  const string LocalAlarmSettingsObjectiveTopic = "LocalAlarmSettingsObjective";

  // Experimental alarm info... highly speculative
  struct DeviceAlertCondition {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    string<256> alert_state;
  };
  #pragma keylist DeviceAlertCondition unique_device_identifier
  const string DeviceAlertConditionTopic = "DeviceAlertCondition";

  struct Alert {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    // This is a placeholder for something more harmonized
    string<256> identifier; //@key
    string<256> text;
  };
  #pragma keylist Alert unique_device_identifier identifier
  const string PatientAlertTopic = "PatientAlert";
  const string TechnicalAlertTopic = "TechnicalAlert";
};


