apply plugin: 'java'

// jplourde hacked this together March 13 with 

// By default we build (no task specified)
defaultTasks 'build'

// early alpha
version = 0.1

// configuration for code generation
configurations { rtiddsgen }

// add generated source code to the main java sourceset
sourceSets { 
  main { 
    java { 
      srcDirs = ['generated/src/main/java','src/main/java']
    }
  }
}

// include java source code in the assembled jar
jar.doFirst { 
  sourceSets.main.java.srcDirs.each { 
    from it
  }
}

dependencies { 
  // nddsjava.jar is the java binding library for RTI DDS
  compile group: 'org.mdpnp.rti.dds', name: 'nddsjava-rt', version: '5.0'
  compile project(':data-types:x73-idl')
  testCompile group: 'org.mdpnp.rti.dds', name: 'nddsjava-rt', version: '5.0'
  testCompile group: 'junit', name: 'junit', version: '4.11'
  
  // all these dependencies are for the code generator
  rtiddsgen group: 'com.rti.dds', name: 'rtiddsgen-resource', version: '5.0'
  rtiddsgen group: 'com.rti.dds', name: 'rtiddsgen', version: '5.0'
  rtiddsgen group: 'org.anarres', name: 'cpp-bin', version: '1.2.6'
  rtiddsgen group: 'xalan', name: 'xalan', version: '2.7.1'
  rtiddsgen group: 'org.antlr', name: 'antlr', version: '3.5'
  rtiddsgen group: 'org.aspectj', name: 'aspectjrt', version: '1.7.2'
}

// makes output directories for the code generator
task mkdirs << { 
  file("generated/src/main/java/").mkdirs()
  file("generated/src/main/cpp/").mkdirs()
}

// explodes resources (xml schema, etc) used by rtiddsgen
task rtiddsgenExplodeResources(type: Copy) { 
  //  dirMode = 0755
  //  fileMode = 0644
  configurations.rtiddsgen.filter { 
    it.toString().endsWith(".zip")}.each { 
    from zipTree(it)}
  into new File(project.projectDir, 'build/rtiddsgen').getAbsolutePath()
}

// Runs the RTI DDS Generate code generator for all idl files under src/main/idl
task rtiddsgenJava(dependsOn: [mkdirs, rtiddsgenExplodeResources]) << { 
  //println project(':x73-idl').build.source
  //println project(':x73-idl').projectDir
  //  FileCollection idlFiles = project(':x73-idl').build.source
  FileTree idlFiles = project(':data-types:x73-idl').build.source

  //println idlFiles
  String loc = new File(project.projectDir, 'build/rtiddsgen/jcpp').getAbsolutePath()

  if(System.properties['os.name'].toLowerCase().contains("windows")) {
    loc = loc + '.cmd'
  }

  String myMain = 'com.rti.ndds.nddsgen.Main'
  List<String> myArgs = ['-language', 'Java', /*'-package', 'org.mdpnp.qmdi.types',*//*, '-ppDisable', */ '-ppPath', loc, '-d', 'generated/src/main/java', '-ppOption', '-I'+project(':data-types:x73-idl').projectDir+'/src/main/idl', '-replace', '-inputIdl']
  
  for(File f : idlFiles) { 
    println 'Generating from ' + f.name
    myArgs.add(f.getAbsolutePath())
    javaexec { 
      classpath = configurations.rtiddsgen
      jvmArgs = ['-DNDDS_RESOURCE_DIR=build/rtiddsgen/resource/']
      main = myMain
      args = myArgs
    }
    myArgs.remove(myArgs.last())
  }
}

// Deletes the java code generated by the RTI DDS code generator
task cleanRtiddsgenJava(type: Delete) { 
  delete 'generated/src/main/java'
}

// IDL files are the inputs to the code generator
//rtiddsgenJava.inputs.source(fileTree(dir: 'src/main/idl').include('**/*.idl'))
rtiddsgenJava.inputs.source(project(':data-types:x73-idl').build.source)

// java files under generated/src/main/java are the outputs of the code generator
rtiddsgenJava.outputs.files(fileTree(dir: 'generated/src/main/java').include('**/*.java'))

// before compiling java code generation must complete
compileJava.dependsOn 'rtiddsgenJava'

// before cleaning generated sources should be cleaned
clean.dependsOn 'cleanRtiddsgenJava'
									   